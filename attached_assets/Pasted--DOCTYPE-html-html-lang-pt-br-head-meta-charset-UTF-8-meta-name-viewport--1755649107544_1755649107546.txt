<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Globo Terrestre 3D Giratório com Gemini</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: 'Inter', sans-serif;
            /* O fundo do body agora é transparente para que o canvas possa ser sobreposto */
            background-color: transparent; 
            color: white;
        }
        #info {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            text-align: center;
            width: 90%;
            max-width: 600px;
            padding: 10px;
            background-color: rgba(0,0,0,0.7); /* Fundo um pouco mais opaco para legibilidade */
            border-radius: 8px;
            z-index: 10;
        }
        canvas {
            display: block;
            cursor: pointer;
        }
        #gemini-fact-box {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 500px;
            background-color: rgba(20, 20, 30, 0.9); /* Fundo um pouco mais opaco para legibilidade */
            border: 1px solid #444;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            z-index: 20;
            display: none;
            text-align: center;
        }
        #gemini-fact-box h3 {
            margin-top: 0;
            color: #FBBF24;
        }
        #gemini-fact-content {
            margin-top: 10px;
            min-height: 40px;
        }
        #close-gemini-box {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #FBBF24;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 10px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

    <div id="info">
        <h1>Globo Terrestre 3D Interativo</h1>
        <p>Clique em qualquer lugar do globo para descobrir um fato interessante com a Gemini API!</p>
    </div>

    <div id="gemini-fact-box">
        <button id="close-gemini-box">&times;</button>
        <h3>✨ Fato Interessante</h3>
        <div id="gemini-fact-content"></div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

    <script>
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 5;

        // **MUDANÇA PRINCIPAL: Ativando a transparência (alpha: true)**
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        document.body.appendChild(renderer.domElement);
        
        // **REMOVIDO: O fundo de estrelas foi removido para permitir a transparência.**

        const sphereGeometry = new THREE.SphereGeometry(2, 64, 64);
        const textureLoader = new THREE.TextureLoader();
        const earthTexture = textureLoader.load(
            'https://unpkg.com/three-globe@2.27.1/example/img/earth-day.jpg',
            undefined, 
            undefined, 
            (err) => console.error('Erro ao carregar a textura da Terra:', err)
        );
        const sphereMaterial = new THREE.MeshStandardMaterial({ map: earthTexture });
        const earth = new THREE.Mesh(sphereGeometry, sphereMaterial);
        scene.add(earth);

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
        directionalLight.position.set(5, 3, 5);
        scene.add(directionalLight);

        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true; 
        controls.dampingFactor = 0.05;
        controls.screenSpacePanning = false;
        controls.minDistance = 3; 
        controls.maxDistance = 10; 
        controls.autoRotate = true; 
        controls.autoRotateSpeed = 0.5;

        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }
        animate();

        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // --- INTEGRAÇÃO COM A GEMINI API ---

        const geminiBox = document.getElementById('gemini-fact-box');
        const geminiContent = document.getElementById('gemini-fact-content');
        const closeGeminiBoxBtn = document.getElementById('close-gemini-box');

        async function getFactFromGemini(lat, lon) {
            geminiContent.innerHTML = '<div class="loader"></div>';
            geminiBox.style.display = 'block';

            const prompt = `Fale um fato geográfico ou cultural interessante sobre a localização com latitude ${lat.toFixed(2)} e longitude ${lon.toFixed(2)}. Seja conciso e responda em português.`;
            
            let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = { contents: chatHistory };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    geminiContent.innerHTML = `<p>${text}</p>`;
                } else {
                    geminiContent.innerText = 'Não foi possível obter um fato sobre este local. Tente novamente.';
                }
            } catch (error) {
                console.error("Erro ao chamar a API do Gemini:", error);
                geminiContent.innerText = 'Ocorreu um erro ao buscar a informação. Por favor, tente mais tarde.';
            }
        }

        renderer.domElement.addEventListener('click', (event) => {
            const mouse = new THREE.Vector2();
            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

            const raycaster = new THREE.Raycaster();
            raycaster.setFromCamera(mouse, camera);

            const intersects = raycaster.intersectObject(earth);

            if (intersects.length > 0) {
                controls.autoRotate = false;
                const point = intersects[0].point;
                
                const lat = 90 - (Math.acos(point.y / 2)) * (180 / Math.PI);
                const lon = ((270 + (Math.atan2(point.x, point.z)) * (180 / Math.PI)) % 360) - 180;
                
                getFactFromGemini(lat, lon);
            }
        });

        closeGeminiBoxBtn.addEventListener('click', () => {
            geminiBox.style.display = 'none';
            controls.autoRotate = true;
        });

    </script>
</body>
</html>
