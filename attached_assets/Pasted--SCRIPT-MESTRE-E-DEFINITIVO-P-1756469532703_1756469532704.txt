-- ================================================================
-- SCRIPT MESTRE E DEFINITIVO PARA O BANCO DE DADOS IDASAM (v2.0)
-- Contém todos os módulos: Imprensa, Financeiro, Projetos, etc.
-- ================================================================

-- ================================================================
-- ETAPA 1: LIMPEZA COMPLETA E SEGURA DO AMBIENTE
-- Garante que não haverá conflitos com estruturas antigas.
-- ================================================================
DROP VIEW IF EXISTS financial_transactions_detailed;
DROP VIEW IF EXISTS bank_accounts_summary;
DROP VIEW IF EXISTS articles_full;

DROP FUNCTION IF EXISTS get_account_current_balance(uuid);
DROP FUNCTION IF EXISTS search_suppliers(text);
DROP FUNCTION IF EXISTS search_donors(text);
DROP FUNCTION IF EXISTS increment_article_views(uuid);
DROP FUNCTION IF EXISTS update_updated_at_column();

DROP TABLE IF EXISTS financial_transactions CASCADE;
DROP TABLE IF EXISTS bank_accounts CASCADE;
DROP TABLE IF EXISTS suppliers CASCADE;
DROP TABLE IF EXISTS donors CASCADE;
DROP TABLE IF EXISTS user_sessions CASCADE;
DROP TABLE IF EXISTS article_tags CASCADE;
DROP TABLE IF EXISTS article_stats CASCADE;
DROP TABLE IF EXISTS comment_reactions CASCADE;
DROP TABLE IF EXISTS article_reactions CASCADE;
DROP TABLE IF EXISTS comments CASCADE;
DROP TABLE IF EXISTS articles CASCADE;
DROP TABLE IF EXISTS projects CASCADE;
DROP TABLE IF EXISTS tags CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS admin_users CASCADE;


-- ================================================================
-- ETAPA 2: FUNÇÕES E TRIGGERS GLOBAIS
-- ================================================================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- ================================================================
-- ETAPA 3: CRIAÇÃO DAS TABELAS (ESTRUTURA COMPLETA)
-- ================================================================

-- ### MÓDULO DE ADMINISTRAÇÃO E CONTEÚDO ###

CREATE TABLE admin_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    name TEXT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('admin', 'editor')),
    active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(50) UNIQUE NOT NULL,
    slug VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    color VARCHAR(7) DEFAULT '#3B82F6',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE tags (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(30) UNIQUE NOT NULL,
    slug VARCHAR(30) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE projects (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    excerpt TEXT,
    content TEXT,
    image_url TEXT,
    status TEXT DEFAULT 'Planejamento',
    budget NUMERIC(15, 2) DEFAULT 0.00,
    is_publicly_visible BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE articles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    excerpt TEXT,
    content TEXT,
    image TEXT,
    featured BOOLEAN DEFAULT false,
    published BOOLEAN DEFAULT false,
    publish_date TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    author_id UUID NOT NULL REFERENCES admin_users(id) ON DELETE SET NULL,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL
);

CREATE TABLE article_tags (
    article_id UUID NOT NULL REFERENCES articles(id) ON DELETE CASCADE,
    tag_id UUID NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
    PRIMARY KEY (article_id, tag_id)
);

CREATE TABLE comments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    article_id UUID NOT NULL REFERENCES articles(id) ON DELETE CASCADE,
    author_name TEXT NOT NULL,
    author_email TEXT,
    content TEXT NOT NULL,
    parent_comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
    is_approved BOOLEAN DEFAULT false,
    reaction_counts JSONB DEFAULT '{}'::jsonb,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ### MÓDULO FINANCEIRO ###

CREATE TABLE bank_accounts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  agency TEXT,
  account_number TEXT,
  initial_balance NUMERIC(12, 2) NOT NULL DEFAULT 0.00,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE TABLE suppliers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    cnpj_cpf TEXT UNIQUE,
    contact_person TEXT,
    email TEXT,
    phone TEXT,
    pix_key TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE donors (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    cnpj_cpf TEXT UNIQUE,
    contact_person TEXT,
    email TEXT,
    phone TEXT,
    pix_key TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE financial_transactions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    description TEXT NOT NULL,
    amount NUMERIC(12, 2) NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('receita', 'despesa')),
    category TEXT NOT NULL,
    date DATE NOT NULL,
    is_publicly_visible BOOLEAN DEFAULT false,
    status TEXT DEFAULT 'approved' CHECK (status IN ('pending', 'approved', 'rejected')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    
    -- Colunas para as chaves estrangeiras
    bank_account_id UUID NOT NULL,
    project_id UUID,
    supplier_id UUID,
    donor_id UUID,

    -- Definição de todas as conexões
    CONSTRAINT fk_bank_account FOREIGN KEY (bank_account_id) REFERENCES bank_accounts(id) ON DELETE RESTRICT,
    CONSTRAINT fk_project FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE SET NULL,
    CONSTRAINT fk_supplier FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE SET NULL,
    CONSTRAINT fk_donor FOREIGN KEY (donor_id) REFERENCES donors(id) ON DELETE SET NULL
);

-- ### TABELAS DE SUPORTE ###

CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES admin_users(id) ON DELETE CASCADE,
    session_token TEXT UNIQUE NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL
);

CREATE TABLE article_stats (
    article_id UUID PRIMARY KEY REFERENCES articles(id) ON DELETE CASCADE,
    views INTEGER DEFAULT 0,
    reaction_counts JSONB DEFAULT '{}'::jsonb,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE article_reactions (
    article_id UUID NOT NULL REFERENCES articles(id) ON DELETE CASCADE,
    user_identifier TEXT NOT NULL,
    reaction_type TEXT NOT NULL,
    UNIQUE(article_id, user_identifier)
);

CREATE TABLE comment_reactions (
    comment_id UUID NOT NULL REFERENCES comments(id) ON DELETE CASCADE,
    user_identifier TEXT NOT NULL,
    reaction_type TEXT NOT NULL,
    UNIQUE(comment_id, user_identifier)
);


-- ================================================================
-- ETAPA 4: APLICANDO TRIGGERS E ÍNDICES
-- ================================================================

-- Triggers para 'updated_at'
CREATE TRIGGER update_admin_users_updated_at BEFORE UPDATE ON admin_users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_articles_updated_at BEFORE UPDATE ON articles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_comments_updated_at BEFORE UPDATE ON comments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON projects FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_bank_accounts_updated_at BEFORE UPDATE ON bank_accounts FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_suppliers_updated_at BEFORE UPDATE ON suppliers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_donors_updated_at BEFORE UPDATE ON donors FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_financial_transactions_updated_at BEFORE UPDATE ON financial_transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Índices para Performance
CREATE INDEX IF NOT EXISTS idx_articles_author_id ON articles(author_id);
CREATE INDEX IF NOT EXISTS idx_articles_slug ON articles(slug);
CREATE INDEX IF NOT EXISTS idx_financial_transactions_bank_account ON financial_transactions(bank_account_id);
CREATE INDEX IF NOT EXISTS idx_financial_transactions_project ON financial_transactions(project_id);
CREATE INDEX IF NOT EXISTS idx_financial_transactions_supplier ON financial_transactions(supplier_id);
CREATE INDEX IF NOT EXISTS idx_financial_transactions_donor ON financial_transactions(donor_id);
CREATE INDEX IF NOT EXISTS idx_financial_transactions_date ON financial_transactions(date);


-- ================================================================
-- ETAPA 5: VIEWS E FUNÇÕES AVANÇADAS
-- ================================================================

CREATE OR REPLACE FUNCTION get_account_current_balance(account_id UUID)
RETURNS NUMERIC(12, 2) AS $$
DECLARE
  initial_bal NUMERIC(12, 2);
  income NUMERIC(12, 2);
  expenses NUMERIC(12, 2);
BEGIN
  SELECT initial_balance INTO initial_bal FROM bank_accounts WHERE id = account_id;
  IF initial_bal IS NULL THEN RETURN 0; END IF;
  
  SELECT COALESCE(SUM(amount), 0) INTO income FROM financial_transactions WHERE bank_account_id = account_id AND type = 'receita' AND status = 'approved';
  SELECT COALESCE(SUM(amount), 0) INTO expenses FROM financial_transactions WHERE bank_account_id = account_id AND type = 'despesa' AND status = 'approved';
  
  RETURN initial_bal + income - expenses;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW financial_transactions_detailed AS
SELECT 
  ft.*,
  ba.name as bank_name,
  p.name as project_name,
  s.name as supplier_name,
  d.name as donor_name
FROM financial_transactions ft
JOIN bank_accounts ba ON ft.bank_account_id = ba.id
LEFT JOIN projects p ON ft.project_id = p.id
LEFT JOIN suppliers s ON ft.supplier_id = s.id
LEFT JOIN donors d ON ft.donor_id = d.id;

CREATE OR REPLACE VIEW articles_full AS
SELECT
    a.*,
    u.name as author_name,
    c.name as category_name,
    c.slug as category_slug,
    c.color as category_color,
    s.views,
    s.reaction_counts,
    (SELECT array_agg(t.name) FROM article_tags at JOIN tags t ON at.tag_id = t.id WHERE at.article_id = a.id) as tags
FROM articles a
LEFT JOIN admin_users u ON a.author_id = u.id
LEFT JOIN categories c ON a.category_id = c.id
LEFT JOIN article_stats s ON a.id = s.article_id;

-- (Adicione outras funções, views, RLS e dados de exemplo aqui se necessário)

-- ================================================================
-- FIM DO SCRIPT MESTRE
-- ================================================================