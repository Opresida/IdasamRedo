-- ================================================================
-- SCHEMA HÍBRIDO FINAL PARA O SISTEMA DE NOTÍCIAS IDASAM
-- Suporta Admins Autenticados e Visitantes Públicos
-- ================================================================

-- Passo 1: Limpeza total do ambiente.
DROP VIEW IF EXISTS articles_full;
DROP TABLE IF EXISTS comment_reactions CASCADE;
DROP TABLE IF EXISTS article_reactions CASCADE;
DROP TABLE IF EXISTS comments CASCADE;
DROP TABLE IF EXISTS article_tags CASCADE;
DROP TABLE IF EXISTS articles CASCADE;
DROP TABLE IF EXISTS tags CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS user_sessions CASCADE;
DROP TABLE IF EXISTS admin_users CASCADE;

-- ================================================================
-- 1. TABELA DE USUÁRIOS (PARA O DASHBOARD)
-- ================================================================
CREATE TABLE admin_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    name TEXT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('admin', 'editor')),
    active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================================
-- 2. TABELAS DE CLASSIFICAÇÃO
-- ================================================================
CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(50) UNIQUE NOT NULL,
    slug VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    color VARCHAR(7) DEFAULT '#3B82F6',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE tags (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(30) UNIQUE NOT NULL,
    slug VARCHAR(30) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================================
-- 3. TABELA DE ARTIGOS (AUTORIA RESTRITA A ADMINS)
-- ================================================================
CREATE TABLE articles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT NOT NULL,
    slug TEXT UNIQUE,
    excerpt TEXT,
    content TEXT NOT NULL,
    author_id UUID NOT NULL REFERENCES admin_users(id) ON DELETE SET NULL,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    image TEXT,
    featured BOOLEAN DEFAULT false,
    published BOOLEAN DEFAULT false,
    publish_date TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================================
-- 4. TABELA DE JUNÇÃO ARTIGOS <-> TAGS
-- ================================================================
CREATE TABLE article_tags (
    article_id UUID NOT NULL REFERENCES articles(id) ON DELETE CASCADE,
    tag_id UUID NOT NULL REFERENCES tags(id) ON DELETE CASCADE,
    PRIMARY KEY (article_id, tag_id)
);

-- ================================================================
-- 5. TABELA DE ESTATÍSTICAS DOS ARTIGOS
-- ================================================================
CREATE TABLE article_stats (
    article_id UUID PRIMARY KEY REFERENCES articles(id) ON DELETE CASCADE,
    views INTEGER DEFAULT 0,
    reaction_counts JSONB DEFAULT '{}'::jsonb,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================================
-- 6. TABELA DE COMENTÁRIOS (AJUSTADA PARA PÚBLICO)
-- ================================================================
CREATE TABLE comments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    article_id UUID NOT NULL REFERENCES articles(id) ON DELETE CASCADE,
    author_name TEXT NOT NULL, -- NOME FORNECIDO PELO VISITANTE
    author_email TEXT,         -- EMAIL (OPCIONAL) FORNECIDO PELO VISITANTE
    content TEXT NOT NULL,
    parent_comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
    is_approved BOOLEAN DEFAULT true, -- PARA MODERAÇÃO
    reaction_counts JSONB DEFAULT '{}'::jsonb,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ================================================================
-- 7. TABELAS DE REAÇÕES (PARA VISITANTES PÚBLICOS)
-- ================================================================
CREATE TABLE article_reactions (
    article_id UUID NOT NULL REFERENCES articles(id) ON DELETE CASCADE,
    user_identifier TEXT NOT NULL,
    reaction_type TEXT NOT NULL,
    UNIQUE(article_id, user_identifier)
);

CREATE TABLE comment_reactions (
    comment_id UUID NOT NULL REFERENCES comments(id) ON DELETE CASCADE,
    user_identifier TEXT NOT NULL,
    reaction_type TEXT NOT NULL,
    UNIQUE(comment_id, user_identifier)
);

-- (O restante do seu script: user_sessions, functions, triggers, etc., pode ser mantido como estava)

-- ================================================================
-- VIEW OTIMIZADA PARA CONSULTAS (SEM MUDANÇAS NECESSÁRIAS)
-- A view já pega o nome do autor do artigo corretamente.
-- ================================================================
CREATE OR REPLACE VIEW articles_full AS
SELECT
    a.id, a.title, a.slug, a.excerpt, a.content,
    u.name as author_name,
    u.id as author_id,
    c.name as category_name,
    c.slug as category_slug,
    c.color as category_color,
    a.image, a.featured, a.published, a.publish_date,
    a.created_at, a.updated_at,
    COALESCE(s.views, 0) as views,
    COALESCE(s.reaction_counts, '{}'::jsonb) as reaction_counts,
    (SELECT array_agg(t.name) FROM article_tags at JOIN tags t ON at.tag_id = t.id WHERE at.article_id = a.id) as tags
FROM articles a
LEFT JOIN admin_users u ON a.author_id = u.id
LEFT JOIN categories c ON a.category_id = c.id
LEFT JOIN article_stats s ON a.id = s.article_id;